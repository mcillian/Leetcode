/****
给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。

示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]
****/

//简单版本
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> results;
        for(int i = 0 ;i < nums.size(); i++){
            results.push_back(i);
            for(int j = i + 1;j < nums.size();j++){
                if(target == nums[i] + nums[j]){
                    results.push_back(j);
                    return results;
                }
            }
            results.pop_back();
        }
    }
};

//优化版本1
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> results;
        unordered_map<int,int> m;
        for(int i =0 ;i < nums.size();i++){
            m[nums[i]] = i;
        }
        for(int i = 0;i < nums.size();i++){
            int t = 0;
            t = target - nums[i];
            if(m.count(t) != 0 && m[t] != i){
                results.push_back(i);
                results.push_back(m[t]);
                break;
            }
        }
        return results;
    }
};

//优化版本2
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> results;
        unordered_map<int,int> m;
        for(int i = 0;i < nums.size();m[nums[i]] = i,i++){
            int t = target - nums[i];
            if(m.count(t) != 0){
                results.push_back(i);
                results.push_back(m[t]);
                break;
            }
        }
        return results;
    }
};
