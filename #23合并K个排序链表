/***
合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。
示例:
输入:
[
  1->4->5,
  1->3->4,
  2->6
]
输出: 1->1->2->3->4->4->5->6
***/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2){
        
        ListNode* p;//current
        ListNode* start;//head
        
        if(l1 == NULL) return l2;
        if(l2 == NULL) return l1;
        
        if(l1 -> val <= l2 -> val){
            start = l1;
            l1 = l1 -> next;
        }else{
            start = l2;
            l2 = l2 -> next;
        }
        p = start;
        
        while(l1 && l2){
            if(l1 -> val <= l2 -> val){
                p -> next = l1;
                l1 = l1 -> next;
            }else{
                p -> next = l2;
                l2 = l2 -> next;
            }
            p = p -> next;
        }
        if(l1){
            p -> next = l1;
        }
        else if(l2){
            p -> next = l2;
        }else
            p -> next = NULL;
        return start;
    }
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.empty())
            return NULL;
        if(lists.size() == 1)
            return lists[0];
        if(lists.size() == 2)
            return mergeTwoLists(lists[0], lists[1]);
        
        int mid = lists.size() / 2;
        vector<ListNode*> sublists1;
        vector<ListNode*> sublists2;
        
        for(int i = 0; i < mid; i++){
            sublists1.push_back(lists[i]);
        }
        for(int i = mid; i < lists.size(); i++){
            sublists2.push_back(lists[i]);
        }
        
        ListNode* l1 = mergeKLists(sublists1);
        ListNode* l2 = mergeKLists(sublists2);
        
        return mergeTwoLists(l1,l2);
    }
};
