/***
给定一个字符串 s 和一些长度相同的单词 words。找出 s 中恰好可以由 words 中所有单词串联形成的子串的起始位置。
注意子串要与 words 中的单词完全匹配，中间不能有其他字符，但不需要考虑 words 中单词串联的顺序。

示例 1：
输入：
  s = "barfoothefoobarman",
  words = ["foo","bar"]
输出：[0,9]
解释：
从索引 0 和 9 开始的子串分别是 "barfoor" 和 "foobar" 。
输出的顺序不重要, [9,0] 也是有效答案。

示例 2：
输入：
  s = "wordgoodgoodgoodbestword",
  words = ["word","good","best","word"]
输出：[]
***/
class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
       vector<int> res;
        if(words.empty() || s.empty() || 
           s.length() < words.size()*words[0].length()) 
            return res;

        int lenOfWord = words[0].length();    // 记录单词的长度
        unordered_map<string,int> dict; // 存最初的单词以及出现次数

        for(int i = 0;i < words.size();i++) {   // 初始化最初的dict
            if(dict.find(words[i]) == dict.end()) {
                dict.insert(make_pair(words[i],1));
            } else {
                dict[words[i]]++;
            }
        }
        // 以单词位单位进行遍历
        // strBeg: 每个单词串的开头
        for(int strBeg = 0;strBeg < lenOfWord;strBeg++) {  // 每一个单词串开头
            unordered_map<string,int> tempDict;
            int left = strBeg, len = 0;
            for(int cur = strBeg;cur <= s.length()-lenOfWord;cur += lenOfWord) {
                string substr = s.substr(cur,lenOfWord);
                if(dict.count(substr) == 0) {   // 非法单词
                    tempDict.clear();
                    len = 0;
                    left = cur + lenOfWord;
                } else {
                    if(tempDict[substr] < dict[substr]) {
                        tempDict[substr]++;
                        len++;
                    } else {
                        string temp;
                        while((temp = s.substr(left,lenOfWord)) != substr) {
                            tempDict[temp]--;
                            left += lenOfWord;
                            len--;
                        }
                        left += lenOfWord;
                    }
                    if(len == words.size()) {
                        res.push_back(left);
                        tempDict[s.substr(left,lenOfWord)]--;
                        len--;
                        left += lenOfWord;
                    }
                }
            }
        }
        return res;
    }
};
