/***
给定一个只包含 '(' 和 ')' 的字符串，找出最长的包含有效括号的子串的长度。
示例 1:
输入: "(()"
输出: 2
解释: 最长有效括号子串为 "()"

示例 2:
输入: ")()())"
输出: 4
解释: 最长有效括号子串为 "()()"
***/
bool cmp(const pair<int, int> &a, const pair<int, int> &b){
        return a.first < b.first;
    }
class Solution {
public:
    int longestValidParentheses(string s) {
        if (s == "" || s.length() < 2) return 0;
        stack<int> st;
        vector<pair<int, int>> v;
        for(int i = 0; i < s.length(); i++){
            if(s[i] == '(') st.push(i);
            else if(s[i] == ')' && st.size()){
                v.push_back(pair<int, int>(st.top(), i + 1));
                st.pop();
            }
        }
        sort(v.begin(), v.end(), cmp);
        int f = 0, t = 0, max_len = 0;
        for(auto i : v){
            if(i.first > t){
                f = i.first;
                t = i.second;
            }else if(i.second > t){
                t = i.second;
            }
            max_len = max(max_len, t - f);
        }
        return max_len;
    }
    
};
