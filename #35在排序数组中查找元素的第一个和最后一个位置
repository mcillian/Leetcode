/***
给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。
你的算法时间复杂度必须是 O(log n) 级别。
如果数组中不存在目标值，返回 [-1, -1]。

示例 1:
输入: nums = [5,7,7,8,8,10], target = 8
输出: [3,4]

示例 2:
输入: nums = [5,7,7,8,8,10], target = 6
输出: [-1,-1]
***/
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        if(nums.empty()) return vector<int>(2, -1);
        vector<int> res;
        int left = 0;
        int right = nums.size() - 1;
        int mid;
        while(left <= right){
            mid = (left + right) / 2;
            if(nums[mid] == target)
                break;
            else if(nums[mid] < target)
                left = mid + 1;
            else
                right = mid - 1;
        }
        if(left <= right){
            int low = mid;
            int high = mid;
            while(low >= 0 && nums[low] == target)
                low--;
            while(high <= nums.size() - 1 && nums[high] == target)
                high++;
            low += 1;
            high -= 1;
            res.push_back(low);
            res.push_back(high);
            return res;
        }
        res.push_back(-1);
        res.push_back(-1);
        return res;
    }
};
