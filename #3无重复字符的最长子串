/****
给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:

输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。
****/
//暴力
class Solution {
public:
    bool is_element_in_vector(vector<char> v,char element){
	
        vector<char>::iterator it;
        it=find(v.begin(),v.end(),element);
        if (it!=v.end()){
            return true;
        }
        else{
            return false;
        }
    }
    
    int lengthOfLongestSubstring(string s) {
        int ans = 0;
        vector<char> sub;
        sub.clear();
        for(int i = 0; i < s.length(); i++){
            sub.push_back(s[i]);
            ans = max(ans,1);
        	for(int j = i + 1; j < s.length(); j++){
                int size = sub.size();
                if(!is_element_in_vector(sub, s[j])){
                    sub.push_back(s[j]);
                    //int size = sub.size();
                    ans = max(ans, size + 1);
                }else{
                    ans = max(ans,size);
                    sub.clear();
                    break;
                }
                if(j == s.length() - 1)
                    return ans;
            }
        }
        return ans;
    }
};

//优化一
/***
使用 HashSet 将字符存储在当前窗口 [i, j)（最初 j = i）中。 
然后我们向右侧滑动索引 j，如果它不在 HashSet 中，我们会继续滑动 j。
直到 s[j] 已经存在于 HashSet 中。
此时，我们找到的没有重复字符的最长子字符串将会以索引 i 开头。
如果我们对所有的 i 这样做，就可以得到答案。
***/
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        Set<Character> set = new HashSet<>();
        int ans = 0, i = 0, j = 0;
        while (i < n && j < n) {
            // try to extend the range [i, j]
            if (!set.contains(s.charAt(j))){
                set.add(s.charAt(j++));
                ans = Math.max(ans, j - i);
            }
            else {
                set.remove(s.charAt(i++));
            }
        }
        return ans;
    }
}
//优化二
/***
也就是说，如果 s[j]在 [i, j)范围内有与 j'重复的字符，我们不需要逐渐增加 i。 
我们可以直接跳过 [i，j']范围内的所有元素，并将 i变为 j' + 1。
***/
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length(), ans = 0;
        Map<Character, Integer> map = new HashMap<>(); // current index of character
        // try to extend the range [i, j]
        for (int j = 0, i = 0; j < n; j++) {
            if (map.containsKey(s.charAt(j))) {
                i = Math.max(map.get(s.charAt(j)), i);
            }
            ans = Math.max(ans, j - i + 1);
            map.put(s.charAt(j), j + 1);
        }
        return ans;
    }
}
