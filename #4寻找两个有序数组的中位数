/***
给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。

请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。

你可以假设 nums1 和 nums2 不会同时为空。

示例 1:

nums1 = [1, 3]
nums2 = [2]

则中位数是 2.0
示例 2:

nums1 = [1, 2]
nums2 = [3, 4]

则中位数是 (2 + 3)/2 = 2.5
***/
//排序（时间复杂度不满足）
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int i = 0, j = 0, m = nums1.size(), n = nums2.size();
        int sum = m+n;
        int mid1 = sum/2, mid2 = mid1;
        vector<int> v(sum); 
        
        if(0 == sum%2){
            mid2 -= 1;
        }
        sum = 0;
        
        for(;i < m && j < n;){
            if(nums1[i] < nums2[j]){
                v[sum++] = nums1[i++];
            }else{
                v[sum++] = nums2[j++];
            }
        }
        
        for(;i < m;){
            v[sum++] = nums1[i++];
        }
        
        for(;j < n;){
            v[sum++] = nums2[j++];
        }
        
        return double(v[mid1] + v[mid2])/2;
    }
};
//递归（O（log（min（m,n））））
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size();
        int n = nums2.size();
        if (m > n) { // to ensure m<=n
            vector<int> temp = nums1; nums1 = nums2; nums2 = temp;
            int tmp = m; m = n; n = tmp;
        }
        int iMin = 0, iMax = m, halfLen = (m + n + 1) / 2;
        while (iMin <= iMax) {
            int i = (iMin + iMax) / 2;
            int j = halfLen - i;
            if (i < iMax && nums2[j-1] > nums1[i]){
                iMin = i + 1; // i is too small
            }
            else if (i > iMin && nums1[i-1] > nums2[j]) {
                iMax = i - 1; // i is too big
            }
            else { // i is perfect
                int maxLeft = 0;
                if (i == 0) {
                    maxLeft = nums2[j-1]; 
                }
                else if (j == 0) { 
                    maxLeft = nums1[i-1]; 
                }
                else { 
                    maxLeft = max(nums1[i-1], nums2[j-1]); 
                }
                if ( (m + n) % 2 == 1 ) {
                    return maxLeft; 
                }
                int minRight = 0;
                if (i == m) { 
                    minRight = nums2[j]; 
                }
                else if (j == n) {
                    minRight = nums1[i]; 
                }
                else { 
                    minRight = min(nums2[j], nums1[i]); 
                }

                return (maxLeft + minRight) / 2.0;
            }
        }
        return 0.0;
    }
};
